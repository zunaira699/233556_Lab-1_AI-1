# -*- coding: utf-8 -*-
"""AI  lab 1 233556

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mp0JZPYr3-32nkKw1HHDpsFvh7BZeVaM

Activity 1
"""

print(1 + 3)
print(10 / 2)

"""Activity 2"""

print("python" + " basics")
print("AI " * 3)

"""Activity 3

"""

fruit = "apple"
print(fruit)
fruit = 17
print(fruit)
x = str(3); y = int(3); z = float(3)
print(type(x), type(y), type(z))

"""Activity 4"""

# Activity: Working with a mixed-type list and extracting sublists
# Step 1: Create a list with different data types (string, float, string,integer)
mylist = ["apple", 34.5, "banana", 9]

# Step 2: Print the entire list to verify its contents
print("Complete list:", mylist)

# Step 3: Access and print the first element (index 0)
print("First element:", mylist[0])

# Step 4: Access and print the last element using negative indexing

print("Last element:", mylist[-1])

# Step 5: Extract and print a sublist from index 1 up to (but not including)index 3
print("Sublist from index 1 to 2:", mylist[1:3])

# Step 6: Extract and print every second element using step in slicing
print("Every second element:", mylist[::2])

# Step 7: Check if a substring exists inside a string element of the list
# For example, check if "app" is present in the first itemif "app" in mylist[0]:
print("Substring 'app' found in the first element.")

# Step 8: Append a new item to the listmylist.append("grape")
print("List after appending 'grape':", mylist)

# Step 9: Remove a specific item from the list
mylist.remove("banana")
print("List after removing 'banana':", mylist)

# Step 10: Replace the value at index 1 with a new value
mylist[1] = 99.9
print("List after updating index 1:", mylist)

# Final Output will display all modifications and operations performed above.

"""Activity 5"""

car = {"brand": "Ford", "model": "Mustang", "year": 1964}
print("Initial dictionary:", car)


print("Model of the car:", car["model"])

car["year"] = 2024
print("After updating 'year':", car)

car["color"] = "red"
print("After adding a new key 'color':", car)

removed_value = car.pop("model")
print("Removed 'model' key with value:", removed_value)
print("Dictionary after pop operation:", car)

last_item = car.popitem()
print("Removed the last inserted item:", last_item)
print("Dictionary after popitem:", car)

print("Get 'brand' safely:", car.get("brand"))
print("Get non-existing key safely (returns None):", car.get("engine"))

print("'brand' key exists in the dictionary.")

print("All keys:", car.keys())
print("All values:", car.values())
print("All items (keyâ€“value pairs):", car.items())



car_copy = car.copy()
print("Shallow copy of dictionary:", car_copy)

car.clear()
print("Dictionary after clearing all items:", car)

"""Activity 6"""

thisset = {"apple", "banana", "cherry"}
print("Initial set:", thisset)


set1 = {"abc", 34, True, 40, "male"}
print("Mixed-type set:", set1)

thisset.add("orange")

print("After adding 'orange':", thisset)

thisset.update(["grape", "mango"])
print("After adding multiple elements:", thisset)

thisset.remove("banana")
print("After removing 'banana':", thisset)

thisset.discard("papaya")
print("After attempting to discard 'papaya' (not present):", thisset)

removed_item = thisset.pop()
print("Removed an arbitrary element:", removed_item)
print("Set after pop operation:", thisset)


print("Is 'apple' in the set?", "apple" in thisset)

union_set = thisset.union(set1)

print("Union of thisset and set1:", union_set)


intersection_set = thisset.intersection(set1)
print("Intersection of thisset and set1:", intersection_set)

difference_set = thisset.difference(set1)
print("Difference (thisset - set1):", difference_set)

copy_set = thisset.copy()
print("Copy of the set:", copy_set)

thisset.clear()
print("Set after clearing all elements:", thisset)

"""Activity 7"""

thistuple = ("apple", "banana", "cherry")
print(thistuple[1])

"""ACTivity 8"""

a, b = 33, 200
if a < b:
    print("b is greater than a")
elif a == b:
    print("a and b are equal")
else:
    print("a is greater than b")

"""Activity 9"""

for i in range(5):
    print("Number:", i)
for i in range(2, 7):
    print("From 2 to 6:", i)
for i in range(0, 10, 2):
    print("Even number:", i)
for i in range(5, 0, -1):
    print("Countdown:", i)
fruits = ["apple", "banana", "cherry"]
for index in range(len(fruits)):
    print("Index:", index, "Fruit:", fruits[index])
for i in range(10):
    if i % 2 != 0:
        print("Odd number:", i)

Activity 10

def my_function(fname, lname):
    print("Full name:", fname + " " + lname)
my_function("Emil", "Refsnes")
def kids_function(*kids):
    print("The youngest child is:", kids[2])
kids_function("Emil", "Tobias", "Linus")
def greet_user(name="Guest"):
    print("Hello,", name)
greet_user()
greet_user("Alice")
def describe_pet(**pet_info):
    print("Pet details:")
    for key, value in pet_info.items():
        print(key.capitalize() + ":", value)
describe_pet(type="Dog", name="Buddy", age=5)
def add_numbers(a, b):
    return a + b
result = add_numbers(10, 20)
print("Sum of numbers:", result)

"""# **`*5. Exercises*`**

Exercises no 1 1. Write a program to check if a number is prime.
"""

num = int(input("Enter a number: "))
if num <= 1:
    print(num, "is not a prime number.")
else:
    is_prime = True
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            is_prime = False
            break
    if is_prime:
        print(num, "is a prime number.")
    else:
        print(num, "is not a prime number.")

"""ex:NO 2Create a list of 10 numbers and print their average."""

numbers = [12, 45, 23, 67, 34, 89, 10, 56, 78, 90]
average = sum(numbers) / len(numbers)
print("Average of the numbers is:", average)

"""Ex:NO 3. Store student names and marks in a dictionary and display the topper."""

students = {
    "Ali": 85,
    "Sara": 92,
    "Ahmed": 78,
    "Zainab": 95,
    "Hassan": 88
}
topper = max(students, key=students.get)
top_marks = students[topper]
print("Topper is:", topper)
print("Marks:", top_marks)

"""Ex:No Demonstrate set operations: union, intersection, difference."""

setA = {1, 2, 3, 4, 5}
setB = {4, 5, 6, 7, 8}
# Union: dono sets ke saare unique elements
union_set = setA.union(setB)
print("Union:", union_set)
# Intersection: dono sets mein common elements
intersection_set = setA.intersection(setB)
print("Intersection:", intersection_set)
# Difference: setA mein aise elements jo setB mein nahi hain
difference_set = setA.difference(setB)
print("Difference (setA - setB):", difference_set)

"""Ex:5. Write a function to compute factorial using recursion."""

def factorial(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n - 1)
# Example usage:
num = 5
print(f"Factorial of {num} is {factorial(num)}")

"""Ex:6. Use a for loop to print the Fibonacci series up to n terms."""

n = int(input("Enter the number of terms: "))
a, b = 0, 1
print("Fibonacci series:")
for _ in range(n):
    print(a, end=" ")
    a, b = b, a + b

"""EX:7. Read a string and count the number of vowels."""

#take user input
String = input('Enter the string :')
count = 0
#to check for less conditions
#keep string in lowercase
String = String.lower()
for i in String:
    if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':
        #if True
        count+=1
#check if any vowel found
if count == 0:
    print('No vowels found')
else:
    print('Total vowels are :' + str(count))

"""eX:NO8. Create a tuple of numbers and find the maximum and minimum."""

t=tuple()
n=int(input("Total number of values in tuple"))
for i in range(n):
    a=input("enter elements")
    t=t+(a,)
print ("maximum value=",max(t))
print ("minimum value=",min(t))

"""ex:no9. Create a program that asks for user input and reverses the string."""

def reverse_string(input_str):
  """
  Reverses a given string.

  Args:
    input_str: The string to be reversed.

  Returns:
    The reversed string.
  """
  return input_str[::-1]

# Get input from the user
user_input = input("Enter a string to reverse: ")

# Reverse the string
reversed_result = reverse_string(user_input)

# Print the reversed string
print("The reversed string is:", reversed_result)
